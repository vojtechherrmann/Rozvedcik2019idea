" "
}
} else {
"-"
}
)
output = paste0(output, abs(fx))
if (rx>0) {
output = paste0(output, ".", rx2)
} else {
output = paste0(output, " ")
}
output = paste0(output, paste(replicate(digits_after-nchar(as.character(rx2)), " "), collapse = ""))
}
x <-  convToString(gffp$x, 1,1, plus_sign = FALSE)
R <-  convToString(gffp$R, 1,1, plus_sign = FALSE)
b1 <- convToString(gffp$b1)
b0 <- gffp$b0
b2 <- convToString(gffp$b2)
b3 <- convToString(gffp$b3)
b4 <- convToString(gffp$b4)
plot.new()
text(
x=0.5, y=0.5,
cex = 1.5, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
plot.new()
text(
x=0.5, y=0.5,
cex = 2.5, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
plot.new()
text(
x=0.5, y=0.5,
cex = 2, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
plot.new()
text(
x=0.5, y=0.5,
cex = 1.7, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
p <- plot.new()
p <- p + text(
x=0.5, y=0.5,
cex = 1.7, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
p
generateFormulaPlot <- function(gffp) {
library(gtools)
# exp = list("Distribution of"~bar(x),
#            "under"~H[0],
#            hat(mu)~"is the mean")
#
# par(mfrow=c(2,2))
# plot(TeX(
#   paste0("SKUPINA = $", gffp$b0, " + $")
# ), cex = 1)
# plot(TeX(
#   paste0("$", gffp$b1, "(", gffp$R, " + ", gffp$x, "\\sin(N))$")
# ), cex = 1)
# plot(TeX(
#   paste0("$", gffp$b2, "(", gffp$R, " + ", gffp$x, "\\sin(N))^2$")
# ), cex = 1)
# plot(TeX(
#   paste0("$", gffp$b3, "(", gffp$R, " + ", gffp$x, "\\sin(N))^3$")
# ), cex = 1)
# plot(TeX(
#   paste0("$", gffp$b4, "(", gffp$R, " + ", gffp$x, "\\sin(N))^4$")
# ), cex = 1)
#
#
#
convToString <- function(
X,
digits_bef = 5,
digits_after = 4,
plus_sign = TRUE
) {
fx <- floor(X)
rx <- round(X-floor(X),digits_after)
rx2 <- 10**(nchar(as.character(rx))-2)*rx
output = ""
output = paste0(output, paste(replicate(digits_bef-nchar(as.character(abs(fx))), " "), collapse = ""))
output = paste0(output,
if (X>=0) {
if (plus_sign) {
"+"
} else {
" "
}
} else {
"-"
}
)
output = paste0(output, abs(fx))
if (rx>0) {
output = paste0(output, ".", rx2)
} else {
output = paste0(output, " ")
}
output = paste0(output, paste(replicate(digits_after-nchar(as.character(rx2)), " "), collapse = ""))
}
x <-  convToString(gffp$x, 1,1, plus_sign = FALSE)
R <-  convToString(gffp$R, 1,1, plus_sign = FALSE)
b0 <- gffp$b0
b1 <- convToString(gffp$b1)
b2 <- convToString(gffp$b2)
b3 <- convToString(gffp$b3)
b4 <- convToString(gffp$b4)
return(
text(
x=0.5, y=0.5,
cex = 1.7, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
)
}
name = "Vojta"
gffp <- generateFunctionForPerson (name)
p <- generateFormulaPlot(gffp)
plot.new()
plot.new()
generateFormulaPlot(gffp)
name = "Vojta"
gffp <- generateFunctionForPerson (name)
plot.new()
generateFormulaPlot(gffp)
gffp <- generateFunctionForPerson (name)
plot.new()
generateFormulaPlot(gffp)
N = 876543
evaluateFunctionForPerson(gffp, N)
text(SKUPINA)
SKUPINA = evaluateFunctionForPerson(gffp, N)
plot.new()
text(SKUPINA)
return(
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue"
labels = SKUPINA
)
}
generateFormulaPlot <- function(gffp) {
library(gtools)
convToString <- function(
X,
digits_bef = 5,
digits_after = 4,
plus_sign = TRUE
) {
fx <- floor(X)
rx <- round(X-floor(X),digits_after)
rx2 <- 10**(nchar(as.character(rx))-2)*rx
output = ""
output = paste0(output, paste(replicate(digits_bef-nchar(as.character(abs(fx))), " "), collapse = ""))
output = paste0(output,
if (X>=0) {
if (plus_sign) {
"+"
} else {
" "
}
} else {
"-"
}
)
output = paste0(output, abs(fx))
if (rx>0) {
output = paste0(output, ".", rx2)
} else {
output = paste0(output, " ")
}
output = paste0(output, paste(replicate(digits_after-nchar(as.character(rx2)), " "), collapse = ""))
}
x <-  convToString(gffp$x, 1,1, plus_sign = FALSE)
R <-  convToString(gffp$R, 1,1, plus_sign = FALSE)
b0 <- gffp$b0
b1 <- convToString(gffp$b1)
b2 <- convToString(gffp$b2)
b3 <- convToString(gffp$b3)
b4 <- convToString(gffp$b4)
return(
text(
x=0.5, y=0.5,
cex = 1.7, family="mono",
labels = paste0(
"SKUPINA = ",
if(gffp$b0!=0){paste0(b0, " +")} else {""},
"\n",
if(gffp$b1!=0){paste0(b1, "(", R, " +", x, chr(183), "sin(N) )   \n")} else {""},
if(gffp$b2!=0){paste0(b2, "(", R, " +", x, chr(183), "sin(N) )^2 \n")} else {""},
if(gffp$b3!=0){paste0(b3, "(", R, " +", x, chr(183), "sin(N) )^3 \n")} else {""},
if(gffp$b4!=0){paste0(b4, "(", R, " +", x, chr(183), "sin(N) )^4 \n")} else {""}
))
)
}
### test framework
trials = 10000
vysledek = numeric(trials)
for (t in 1:trials) {
name = "Vojta"
gffp <- generateFunctionForPerson(name)
vysledek[t] = evaluateFunctionForPerson(gffp, 1000)
}
generateSkupinaPlot <- function(SKUPINA) {
return(
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue",
labels = SKUPINA
))
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue",
labels = SKUPINA
))
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue",
labels = SKUPINA
)
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue", face = 2,
labels = SKUPINA
)
text(
x=0.5, y=0.5,
cex = 4, family="mono", col = "Blue", font = 2,
labels = SKUPINA
)
text(
x=0.5, y=0.5,
cex = 10, family="mono", col = "Blue", font = 2,
labels = SKUPINA
)
generateSkupinaPlot <- function(SKUPINA) {
return(
text(
x=0.5, y=0.5,
cex = 10, family="mono", col = "Blue", font = 2,
labels = SKUPINA
))
}
plot.new()
generateSkupinaPlot(SKUPINA)
pdf(paste0(name, "_formula.pdf"))
plot.new()
generateFormulaPlot(gffp)
dev.off()
jpeg(paste0(name, "_formula.jpeg"))
plot.new()
generateFormulaPlot(gffp)
dev.off()
name = "Vojta"
gffp <- generateFunctionForPerson (name)
jpeg(paste0(name, "_formula.jpeg"))
plot.new()
generateFormulaPlot(gffp)
dev.off()
N = 876543
SKUPINA = evaluateFunctionForPerson(gffp, N)
jpeg(paste0(name, "_skupina.jpeg"))
plot.new()
generateSkupinaPlot(SKUPINA)
dev.off()
name = "Vojta"
gffp <- generateFunctionForPerson (name)
png(paste0(name, "_formula.png"))
plot.new()
generateFormulaPlot(gffp)
dev.off()
N = 876543
png(paste0(name, "_skupina.png"))
plot.new()
SKUPINA = evaluateFunctionForPerson(gffp, N)
generateSkupinaPlot(SKUPINA)
dev.off()
png(paste0(name, "_formula.png"), height = 500)
plot.new()
generateFormulaPlot(gffp)
dev.off()
png(paste0(name, "_formula.png"), height = 5000)
plot.new()
generateFormulaPlot(gffp)
dev.off()
png(paste0(name, "_formula.png"), height = 300)
plot.new()
generateFormulaPlot(gffp)
dev.off()
png(paste0(name, "_formula.png"), height = 250)
plot.new()
generateFormulaPlot(gffp)
dev.off()
png(paste0(name, "_formula.png"), height = 600, width = 1200)
plot.new()
generateFormulaPlot(gffp)
dev.off()
testFramework <- function() {
### test framework
trials = 10000
vysledek = numeric(trials)
for (t in 1:trials) {
name = "Vojta"
gffp <- generateFunctionForPerson(name)
vysledek[t] = evaluateFunctionForPerson(gffp, 1000)
}
table(vysledek)
}
source('C:/Users/herrm/Desktop/matematické projekty nepovinného charakteru/Rozvedcik2019/test2.R')
name = "Vojta"
gffp <- generateFunctionForPerson (name)
png(paste0(name, "_formula.png"), height = 600, width = 1200)
plot.new()
generateFormulaPlot(gffp)
dev.off()
gffp <- generateFunctionForPerson (name)
png(paste0(name, "_formula.png"), height = 500, width = 1000)
plot.new()
generateFormulaPlot(gffp)
dev.off()
N = 876543
SKUPINA = evaluateFunctionForPerson(gffp, N)
shiny::runApp('app')
runApp('app')
source('C:/Users/herrm/Desktop/matematické projekty nepovinného charakteru/Rozvedcik2019/test2.R')
name = "Vojta"
gffp <- generateFunctionForPerson (name)
png(paste0(name, "_formula.png"), height = 500, width = 1000)
plot.new()
generateFormulaPlot(gffp)
dev.off()
source('C:/Users/herrm/Desktop/matematické projekty nepovinného charakteru/Rozvedcik2019/test2.R')
#k <- getPossibleGroups(name)
k <- c(1, 2)
gffp <- generateFunctionForPerson (name)
png(paste0(name, "_formula.png"), height = 500, width = 1000)
plot.new()
generateFormulaPlot(gffp)
dev.off()
mail_message <- mime() %>%
to("barbora.hornikova@outlook.com") %>%
from("herrmann.vojtech@gmail.com") %>%
subject("test") %>%
text_body("test_body")
send_message(mail_message)
runApp('app')
source('C:/Users/herrm/Desktop/matematické projekty nepovinného charakteru/Rozvedcik2019/test2.R')
runApp('app')
guests <- read.csv("rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
guests <- read.csv("./rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
runApp('app')
guests <- read.csv("rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
guests = read.csv("rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
guests = read.csv("rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
guests = read.csv("app/rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
guests = read_csv("app/rozvedcik.csv", stringsAsFactors = FALSE, header = TRUE, encoding = "UTF-8") %>%
filter(Plays == 1)
library(shiny)
library(shinythemes)
install.packages(shinythemes)
install.packages("shinythemes")
library(shinythemes)
library(dplyr)
library(readr)
# Load data
trend_data <- read_csv("data/trend_data.csv")
# Load data
trend_data <- read_csv("app/rozvedcik.csv")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Rozvědčík 2019 - Losovátko"),
sidebarLayout(
sidebarPanel(
# Select type of trend to plot
selectInput(inputId = "name", label = strong("Jméno"),
choices = unique(quests$Name),
selected = "Bára"),
textInput(inputId = "number", label = strong("Přirozené číslo"))
),
# Output: Description, lineplot, and reference
mainPanel(
plotOutput(outputId = "lineplot", height = "300px"),
textOutput(outputId = "desc"),
tags$a(href = "https://www.google.com/finance/domestic_trends", "Source: Google Domestic Trends", target = "_blank")
)
)
)
runApp('app')
# Subset data
guest <- guests %>% filter(name == input$Name)
runApp('app')
runApp('app')
generateFormulaPlot(gffp)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
chr(&lfloor;)
chr("&lfloor;")
chr(8970)
chr(192)
for (i in 1:3000) {}
for (i in 1:3000) { print(chr(i))}
for (i in 1:100) { print(chr(i))}
for (i in 101:200) { print(chr(i))}
for (i in 201:300) { print(chr(i))}
a <- "\U00B5"
cat(a)
a <- "\U230A"
cat(a)
a <- "\U230A"
cat(a)
cat(a)
grep(a)
grep("U", a)
"\u2603"
"\u230a"
"\u230A"
"\U230A"
"\U0001f600\U0001f601\U0001f602\U0001f603\U0001f604\U0001f605\U0001f606\U0001f607\U0001f608\U0001f609\U0001f60a\U0001f60b\U0001f60c\U0001f60d\U0001f60e\U0001f60f\U0001f610\U0001f611\U0001f612\U0001f613\U0001f614\U0001f615\U0001f616\U0001f617\U0001f618\U0001f619\U0001f61a\U0001f61b\U0001f61c\U0001f61d\U0001f61e\U0001f61f\U0001f620\U0001f621\U0001f622\U0001f623\U0001f624\U0001f625\U0001f626\U0001f627\U0001f628\U0001f629\U0001f62a\U0001f62b\U0001f62c\U0001f62d\U0001f62e\U0001f62f\U0001f630\U0001f631\U0001f632\U0001f633\U0001f634\U0001f635\U0001f636\U0001f637\U0001f638\U0001f639\U0001f63a\U0001f63b\U0001f63c\U0001f63d\U0001f63e\U0001f63f\U0001f640\U0001f641\U0001f642\U0001f643\U0001f644\U0001f645\U0001f646\U0001f647\U0001f648\U0001f649\U0001f64a\U0001f64b\U0001f64c\U0001f64d\U0001f64e\U0001f64f"
"\U0001f600"
"\U0001"
"\U001"
"\u0001"
"\u2932"
"\u2603"
"\u2604"
"\u2605"
"\u2606"
"\u2607"
"\u2608"
TestUnicode <- function(start="25a0", end="25ff", ...)
{
nstart <- as.hexmode(start)
nend <- as.hexmode(end)
r <- nstart:nend
s <- ceiling(sqrt(length(r)))
par(pty="s")
plot(c(-1,(s)), c(-1,(s)), type="n", xlab="", ylab="",
xaxs="i", yaxs="i")
grid(s+1, s+1, lty=1)
for(i in seq(r)) {
try(points(i%%s, i%/%s, pch=-1*r[i],...))
}
}
TestUnicode()
TestUnicode(9500,9900)
"\u230A"
